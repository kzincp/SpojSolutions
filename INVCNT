//SPOJ https://www.spoj.com/problems/INVCNT/
// INVERSION COUNT USING MERGESORT

// BASIC IDEA => In this solution we are going to divide the problem into subproblems. 
//If we know the inversion count of left array and right array then we can merge it to get the answer. 
//But, we also need to add the inversions in the merge process. 
//So finally inversion count = Inversion count of left + inversion count of right + inversion count during the merge process. 
// Complexity of this solution is O(nlogn)

#include<bits/stdc++.h>
#define fr(i,c,b) for(int i=c;i<b;i++)
#define si(x) int x; scanf("%d", &x)
#define sll(x) ll x; scanf("%lld", &x)
#define pi(x) printf("%d", x)
#define pll(x) printf("%lld", x)
#define watch(x) cout << (#x) << " is " << (x) << endl
#define MAX 1000001

typedef long long int ll;

using namespace std;

ll merge(ll L[],ll R[],ll A[],int nl,int nr)
{
    ll i=0,j=0,k=0;
    ll c=0;
    while(i<nl&&j<nr)
    {
        if(L[i]<R[j])
        {
            A[k++]=L[i++];
        }
        else
        {
            c+=nl-i;
            A[k++]=R[j++];
        }
    }
    while(i<nl)
    {
        A[k++]=L[i++];
    }
        while(j<nr)
    {
        A[k++]=R[j++];
    }
    return c;
}

ll mergesort(ll A[],int n)
{
    if(n<2)
    {
        return 0;
    }
    else
    {
        ll mid=n/2;
        ll L[mid]; ll R[n-mid];
        int i;
        for(i=0;i<mid;i++)
            L[i]=A[i];
        for(i=mid;i<n;i++)
            R[i-mid]=A[i];
        ll x1=mergesort(L,mid);
        ll x2=mergesort(R,n-mid);
        ll x3=merge(L,R,A,mid,n-mid);
        return x1+x2+x3;
    }
}


int main()
{
    si(t);
    while(t--)
    {
       // char ch; cin>>ch;
        si(n);
        ll a[n];
        fr(i,0,n)
            cin>>a[i];
            
        cout<<mergesort(a,n)<<endl;
    }
}
